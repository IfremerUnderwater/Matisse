// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nav_photo_info.proto

#ifndef PROTOBUF_nav_5fphoto_5finfo_2eproto__INCLUDED
#define PROTOBUF_nav_5fphoto_5finfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_nav_5fphoto_5finfo_2eproto();
void protobuf_AssignDesc_nav_5fphoto_5finfo_2eproto();
void protobuf_ShutdownFile_nav_5fphoto_5finfo_2eproto();

class NavPhotoInfoMessage;
class NavPhotoInfoMessage_TimeStamp;

// ===================================================================

class NavPhotoInfoMessage_TimeStamp : public ::google::protobuf::Message {
 public:
  NavPhotoInfoMessage_TimeStamp();
  virtual ~NavPhotoInfoMessage_TimeStamp();

  NavPhotoInfoMessage_TimeStamp(const NavPhotoInfoMessage_TimeStamp& from);

  inline NavPhotoInfoMessage_TimeStamp& operator=(const NavPhotoInfoMessage_TimeStamp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NavPhotoInfoMessage_TimeStamp& default_instance();

  void Swap(NavPhotoInfoMessage_TimeStamp* other);

  // implements Message ----------------------------------------------

  NavPhotoInfoMessage_TimeStamp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NavPhotoInfoMessage_TimeStamp& from);
  void MergeFrom(const NavPhotoInfoMessage_TimeStamp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 sec = 1;
  inline bool has_sec() const;
  inline void clear_sec();
  static const int kSecFieldNumber = 1;
  inline ::google::protobuf::uint32 sec() const;
  inline void set_sec(::google::protobuf::uint32 value);

  // required uint32 nsec = 2;
  inline bool has_nsec() const;
  inline void clear_nsec();
  static const int kNsecFieldNumber = 2;
  inline ::google::protobuf::uint32 nsec() const;
  inline void set_nsec(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:NavPhotoInfoMessage.TimeStamp)
 private:
  inline void set_has_sec();
  inline void clear_has_sec();
  inline void set_has_nsec();
  inline void clear_has_nsec();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 sec_;
  ::google::protobuf::uint32 nsec_;
  friend void  protobuf_AddDesc_nav_5fphoto_5finfo_2eproto();
  friend void protobuf_AssignDesc_nav_5fphoto_5finfo_2eproto();
  friend void protobuf_ShutdownFile_nav_5fphoto_5finfo_2eproto();

  void InitAsDefaultInstance();
  static NavPhotoInfoMessage_TimeStamp* default_instance_;
};
// -------------------------------------------------------------------

class NavPhotoInfoMessage : public ::google::protobuf::Message {
 public:
  NavPhotoInfoMessage();
  virtual ~NavPhotoInfoMessage();

  NavPhotoInfoMessage(const NavPhotoInfoMessage& from);

  inline NavPhotoInfoMessage& operator=(const NavPhotoInfoMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NavPhotoInfoMessage& default_instance();

  void Swap(NavPhotoInfoMessage* other);

  // implements Message ----------------------------------------------

  NavPhotoInfoMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NavPhotoInfoMessage& from);
  void MergeFrom(const NavPhotoInfoMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef NavPhotoInfoMessage_TimeStamp TimeStamp;

  // accessors -------------------------------------------------------

  // required double latitude = 1;
  inline bool has_latitude() const;
  inline void clear_latitude();
  static const int kLatitudeFieldNumber = 1;
  inline double latitude() const;
  inline void set_latitude(double value);

  // required double longitude = 2;
  inline bool has_longitude() const;
  inline void clear_longitude();
  static const int kLongitudeFieldNumber = 2;
  inline double longitude() const;
  inline void set_longitude(double value);

  // required double yaw = 3;
  inline bool has_yaw() const;
  inline void clear_yaw();
  static const int kYawFieldNumber = 3;
  inline double yaw() const;
  inline void set_yaw(double value);

  // required double roll = 4;
  inline bool has_roll() const;
  inline void clear_roll();
  static const int kRollFieldNumber = 4;
  inline double roll() const;
  inline void set_roll(double value);

  // required double pitch = 5;
  inline bool has_pitch() const;
  inline void clear_pitch();
  static const int kPitchFieldNumber = 5;
  inline double pitch() const;
  inline void set_pitch(double value);

  // required double depth = 6;
  inline bool has_depth() const;
  inline void clear_depth();
  static const int kDepthFieldNumber = 6;
  inline double depth() const;
  inline void set_depth(double value);

  // required double altitude = 7;
  inline bool has_altitude() const;
  inline void clear_altitude();
  static const int kAltitudeFieldNumber = 7;
  inline double altitude() const;
  inline void set_altitude(double value);

  // optional string photopath = 8;
  inline bool has_photopath() const;
  inline void clear_photopath();
  static const int kPhotopathFieldNumber = 8;
  inline const ::std::string& photopath() const;
  inline void set_photopath(const ::std::string& value);
  inline void set_photopath(const char* value);
  inline void set_photopath(const char* value, size_t size);
  inline ::std::string* mutable_photopath();
  inline ::std::string* release_photopath();
  inline void set_allocated_photopath(::std::string* photopath);

  // optional .NavPhotoInfoMessage.TimeStamp photostamp = 9;
  inline bool has_photostamp() const;
  inline void clear_photostamp();
  static const int kPhotostampFieldNumber = 9;
  inline const ::NavPhotoInfoMessage_TimeStamp& photostamp() const;
  inline ::NavPhotoInfoMessage_TimeStamp* mutable_photostamp();
  inline ::NavPhotoInfoMessage_TimeStamp* release_photostamp();
  inline void set_allocated_photostamp(::NavPhotoInfoMessage_TimeStamp* photostamp);

  // optional double pan = 10;
  inline bool has_pan() const;
  inline void clear_pan();
  static const int kPanFieldNumber = 10;
  inline double pan() const;
  inline void set_pan(double value);

  // optional double tilt = 11;
  inline bool has_tilt() const;
  inline void clear_tilt();
  static const int kTiltFieldNumber = 11;
  inline double tilt() const;
  inline void set_tilt(double value);

  // @@protoc_insertion_point(class_scope:NavPhotoInfoMessage)
 private:
  inline void set_has_latitude();
  inline void clear_has_latitude();
  inline void set_has_longitude();
  inline void clear_has_longitude();
  inline void set_has_yaw();
  inline void clear_has_yaw();
  inline void set_has_roll();
  inline void clear_has_roll();
  inline void set_has_pitch();
  inline void clear_has_pitch();
  inline void set_has_depth();
  inline void clear_has_depth();
  inline void set_has_altitude();
  inline void clear_has_altitude();
  inline void set_has_photopath();
  inline void clear_has_photopath();
  inline void set_has_photostamp();
  inline void clear_has_photostamp();
  inline void set_has_pan();
  inline void clear_has_pan();
  inline void set_has_tilt();
  inline void clear_has_tilt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double latitude_;
  double longitude_;
  double yaw_;
  double roll_;
  double pitch_;
  double depth_;
  double altitude_;
  ::std::string* photopath_;
  ::NavPhotoInfoMessage_TimeStamp* photostamp_;
  double pan_;
  double tilt_;
  friend void  protobuf_AddDesc_nav_5fphoto_5finfo_2eproto();
  friend void protobuf_AssignDesc_nav_5fphoto_5finfo_2eproto();
  friend void protobuf_ShutdownFile_nav_5fphoto_5finfo_2eproto();

  void InitAsDefaultInstance();
  static NavPhotoInfoMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// NavPhotoInfoMessage_TimeStamp

// required uint32 sec = 1;
inline bool NavPhotoInfoMessage_TimeStamp::has_sec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NavPhotoInfoMessage_TimeStamp::set_has_sec() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NavPhotoInfoMessage_TimeStamp::clear_has_sec() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NavPhotoInfoMessage_TimeStamp::clear_sec() {
  sec_ = 0u;
  clear_has_sec();
}
inline ::google::protobuf::uint32 NavPhotoInfoMessage_TimeStamp::sec() const {
  // @@protoc_insertion_point(field_get:NavPhotoInfoMessage.TimeStamp.sec)
  return sec_;
}
inline void NavPhotoInfoMessage_TimeStamp::set_sec(::google::protobuf::uint32 value) {
  set_has_sec();
  sec_ = value;
  // @@protoc_insertion_point(field_set:NavPhotoInfoMessage.TimeStamp.sec)
}

// required uint32 nsec = 2;
inline bool NavPhotoInfoMessage_TimeStamp::has_nsec() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NavPhotoInfoMessage_TimeStamp::set_has_nsec() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NavPhotoInfoMessage_TimeStamp::clear_has_nsec() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NavPhotoInfoMessage_TimeStamp::clear_nsec() {
  nsec_ = 0u;
  clear_has_nsec();
}
inline ::google::protobuf::uint32 NavPhotoInfoMessage_TimeStamp::nsec() const {
  // @@protoc_insertion_point(field_get:NavPhotoInfoMessage.TimeStamp.nsec)
  return nsec_;
}
inline void NavPhotoInfoMessage_TimeStamp::set_nsec(::google::protobuf::uint32 value) {
  set_has_nsec();
  nsec_ = value;
  // @@protoc_insertion_point(field_set:NavPhotoInfoMessage.TimeStamp.nsec)
}

// -------------------------------------------------------------------

// NavPhotoInfoMessage

// required double latitude = 1;
inline bool NavPhotoInfoMessage::has_latitude() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NavPhotoInfoMessage::set_has_latitude() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NavPhotoInfoMessage::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NavPhotoInfoMessage::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline double NavPhotoInfoMessage::latitude() const {
  // @@protoc_insertion_point(field_get:NavPhotoInfoMessage.latitude)
  return latitude_;
}
inline void NavPhotoInfoMessage::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:NavPhotoInfoMessage.latitude)
}

// required double longitude = 2;
inline bool NavPhotoInfoMessage::has_longitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NavPhotoInfoMessage::set_has_longitude() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NavPhotoInfoMessage::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NavPhotoInfoMessage::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline double NavPhotoInfoMessage::longitude() const {
  // @@protoc_insertion_point(field_get:NavPhotoInfoMessage.longitude)
  return longitude_;
}
inline void NavPhotoInfoMessage::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:NavPhotoInfoMessage.longitude)
}

// required double yaw = 3;
inline bool NavPhotoInfoMessage::has_yaw() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NavPhotoInfoMessage::set_has_yaw() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NavPhotoInfoMessage::clear_has_yaw() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NavPhotoInfoMessage::clear_yaw() {
  yaw_ = 0;
  clear_has_yaw();
}
inline double NavPhotoInfoMessage::yaw() const {
  // @@protoc_insertion_point(field_get:NavPhotoInfoMessage.yaw)
  return yaw_;
}
inline void NavPhotoInfoMessage::set_yaw(double value) {
  set_has_yaw();
  yaw_ = value;
  // @@protoc_insertion_point(field_set:NavPhotoInfoMessage.yaw)
}

// required double roll = 4;
inline bool NavPhotoInfoMessage::has_roll() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NavPhotoInfoMessage::set_has_roll() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NavPhotoInfoMessage::clear_has_roll() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NavPhotoInfoMessage::clear_roll() {
  roll_ = 0;
  clear_has_roll();
}
inline double NavPhotoInfoMessage::roll() const {
  // @@protoc_insertion_point(field_get:NavPhotoInfoMessage.roll)
  return roll_;
}
inline void NavPhotoInfoMessage::set_roll(double value) {
  set_has_roll();
  roll_ = value;
  // @@protoc_insertion_point(field_set:NavPhotoInfoMessage.roll)
}

// required double pitch = 5;
inline bool NavPhotoInfoMessage::has_pitch() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NavPhotoInfoMessage::set_has_pitch() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NavPhotoInfoMessage::clear_has_pitch() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NavPhotoInfoMessage::clear_pitch() {
  pitch_ = 0;
  clear_has_pitch();
}
inline double NavPhotoInfoMessage::pitch() const {
  // @@protoc_insertion_point(field_get:NavPhotoInfoMessage.pitch)
  return pitch_;
}
inline void NavPhotoInfoMessage::set_pitch(double value) {
  set_has_pitch();
  pitch_ = value;
  // @@protoc_insertion_point(field_set:NavPhotoInfoMessage.pitch)
}

// required double depth = 6;
inline bool NavPhotoInfoMessage::has_depth() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NavPhotoInfoMessage::set_has_depth() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NavPhotoInfoMessage::clear_has_depth() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NavPhotoInfoMessage::clear_depth() {
  depth_ = 0;
  clear_has_depth();
}
inline double NavPhotoInfoMessage::depth() const {
  // @@protoc_insertion_point(field_get:NavPhotoInfoMessage.depth)
  return depth_;
}
inline void NavPhotoInfoMessage::set_depth(double value) {
  set_has_depth();
  depth_ = value;
  // @@protoc_insertion_point(field_set:NavPhotoInfoMessage.depth)
}

// required double altitude = 7;
inline bool NavPhotoInfoMessage::has_altitude() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NavPhotoInfoMessage::set_has_altitude() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NavPhotoInfoMessage::clear_has_altitude() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NavPhotoInfoMessage::clear_altitude() {
  altitude_ = 0;
  clear_has_altitude();
}
inline double NavPhotoInfoMessage::altitude() const {
  // @@protoc_insertion_point(field_get:NavPhotoInfoMessage.altitude)
  return altitude_;
}
inline void NavPhotoInfoMessage::set_altitude(double value) {
  set_has_altitude();
  altitude_ = value;
  // @@protoc_insertion_point(field_set:NavPhotoInfoMessage.altitude)
}

// optional string photopath = 8;
inline bool NavPhotoInfoMessage::has_photopath() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NavPhotoInfoMessage::set_has_photopath() {
  _has_bits_[0] |= 0x00000080u;
}
inline void NavPhotoInfoMessage::clear_has_photopath() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void NavPhotoInfoMessage::clear_photopath() {
  if (photopath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    photopath_->clear();
  }
  clear_has_photopath();
}
inline const ::std::string& NavPhotoInfoMessage::photopath() const {
  // @@protoc_insertion_point(field_get:NavPhotoInfoMessage.photopath)
  return *photopath_;
}
inline void NavPhotoInfoMessage::set_photopath(const ::std::string& value) {
  set_has_photopath();
  if (photopath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    photopath_ = new ::std::string;
  }
  photopath_->assign(value);
  // @@protoc_insertion_point(field_set:NavPhotoInfoMessage.photopath)
}
inline void NavPhotoInfoMessage::set_photopath(const char* value) {
  set_has_photopath();
  if (photopath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    photopath_ = new ::std::string;
  }
  photopath_->assign(value);
  // @@protoc_insertion_point(field_set_char:NavPhotoInfoMessage.photopath)
}
inline void NavPhotoInfoMessage::set_photopath(const char* value, size_t size) {
  set_has_photopath();
  if (photopath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    photopath_ = new ::std::string;
  }
  photopath_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NavPhotoInfoMessage.photopath)
}
inline ::std::string* NavPhotoInfoMessage::mutable_photopath() {
  set_has_photopath();
  if (photopath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    photopath_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:NavPhotoInfoMessage.photopath)
  return photopath_;
}
inline ::std::string* NavPhotoInfoMessage::release_photopath() {
  clear_has_photopath();
  if (photopath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = photopath_;
    photopath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NavPhotoInfoMessage::set_allocated_photopath(::std::string* photopath) {
  if (photopath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete photopath_;
  }
  if (photopath) {
    set_has_photopath();
    photopath_ = photopath;
  } else {
    clear_has_photopath();
    photopath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:NavPhotoInfoMessage.photopath)
}

// optional .NavPhotoInfoMessage.TimeStamp photostamp = 9;
inline bool NavPhotoInfoMessage::has_photostamp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void NavPhotoInfoMessage::set_has_photostamp() {
  _has_bits_[0] |= 0x00000100u;
}
inline void NavPhotoInfoMessage::clear_has_photostamp() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void NavPhotoInfoMessage::clear_photostamp() {
  if (photostamp_ != NULL) photostamp_->::NavPhotoInfoMessage_TimeStamp::Clear();
  clear_has_photostamp();
}
inline const ::NavPhotoInfoMessage_TimeStamp& NavPhotoInfoMessage::photostamp() const {
  // @@protoc_insertion_point(field_get:NavPhotoInfoMessage.photostamp)
  return photostamp_ != NULL ? *photostamp_ : *default_instance_->photostamp_;
}
inline ::NavPhotoInfoMessage_TimeStamp* NavPhotoInfoMessage::mutable_photostamp() {
  set_has_photostamp();
  if (photostamp_ == NULL) photostamp_ = new ::NavPhotoInfoMessage_TimeStamp;
  // @@protoc_insertion_point(field_mutable:NavPhotoInfoMessage.photostamp)
  return photostamp_;
}
inline ::NavPhotoInfoMessage_TimeStamp* NavPhotoInfoMessage::release_photostamp() {
  clear_has_photostamp();
  ::NavPhotoInfoMessage_TimeStamp* temp = photostamp_;
  photostamp_ = NULL;
  return temp;
}
inline void NavPhotoInfoMessage::set_allocated_photostamp(::NavPhotoInfoMessage_TimeStamp* photostamp) {
  delete photostamp_;
  photostamp_ = photostamp;
  if (photostamp) {
    set_has_photostamp();
  } else {
    clear_has_photostamp();
  }
  // @@protoc_insertion_point(field_set_allocated:NavPhotoInfoMessage.photostamp)
}

// optional double pan = 10;
inline bool NavPhotoInfoMessage::has_pan() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void NavPhotoInfoMessage::set_has_pan() {
  _has_bits_[0] |= 0x00000200u;
}
inline void NavPhotoInfoMessage::clear_has_pan() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void NavPhotoInfoMessage::clear_pan() {
  pan_ = 0;
  clear_has_pan();
}
inline double NavPhotoInfoMessage::pan() const {
  // @@protoc_insertion_point(field_get:NavPhotoInfoMessage.pan)
  return pan_;
}
inline void NavPhotoInfoMessage::set_pan(double value) {
  set_has_pan();
  pan_ = value;
  // @@protoc_insertion_point(field_set:NavPhotoInfoMessage.pan)
}

// optional double tilt = 11;
inline bool NavPhotoInfoMessage::has_tilt() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void NavPhotoInfoMessage::set_has_tilt() {
  _has_bits_[0] |= 0x00000400u;
}
inline void NavPhotoInfoMessage::clear_has_tilt() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void NavPhotoInfoMessage::clear_tilt() {
  tilt_ = 0;
  clear_has_tilt();
}
inline double NavPhotoInfoMessage::tilt() const {
  // @@protoc_insertion_point(field_get:NavPhotoInfoMessage.tilt)
  return tilt_;
}
inline void NavPhotoInfoMessage::set_tilt(double value) {
  set_has_tilt();
  tilt_ = value;
  // @@protoc_insertion_point(field_set:NavPhotoInfoMessage.tilt)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_nav_5fphoto_5finfo_2eproto__INCLUDED
