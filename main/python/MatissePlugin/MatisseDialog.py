'''
Created on 25 mars 2014

@author: d.amar
'''
from PyQt4.QtCore import *
from PyQt4.QtGui import *
from PyQt4.QtNetwork import *
from qgis.core import *
from PyQt4 import QtCore

import resources

# Generated by pyuic4 -o ui_MatissDialog.py -x ui_MatissDialog.ui
# TODO: Code a commenter
# TODO: Donner la possibilite de changer de port de connexion

from ui_MatisseDialog import Ui_MatisseDialog

class MatisseDialog(QDialog):
    
    signal_create_layer = pyqtSignal(str, str)
    
    def __init__(self, parent=None):
        
        # IHM
        QDialog.__init__(self)
        self._ui = Ui_MatisseDialog()
        self._ui.setupUi(self);
        self._ui.lblIconConnect.setPixmap(QPixmap(":/images/images/led-grey.png"))

        self._connected = False
        self._messagesDict = {'JOB': 'processJob', 'CONFIG' : 'processConfig', 'JOBEXECUTION' : 'processExecution'}

        # Slot/signal connection
        self._ui.btnListJobs.clicked.connect(self.slot_listjobs)
        self._ui.btnCreateLayer.clicked.connect(self.slot_createLayer)
        self._ui.treeJobs.itemClicked.connect(self.slot_job_selected)
        self._jobs={}
        self._assemblies={}
        #self.addJob("test", "ddd", "cccc", "rrrr")
        
        # Client
        self._socket = QTcpSocket(self)
        self._socket.connected.connect(self.slot_socket_connected)

        self._socket.readyRead.connect(self.slot_socket_readyRead)
        self._socket.disconnected.connect(self.slot_socket_disconnected)
        self._socket.connectToHost(QHostAddress.LocalHost, 8888)
        self.clearJobs()

    @pyqtSlot(QTreeWidgetItem)
    def slot_job_selected(self, item ):
        if (item.childCount() == 0 ):
            self._selectedJob = str(item.text(0))
            job = self._jobs[str(item.text(0))]
            description="Date:\n" + \
                        job["date"] + \
                        "\n\nCommentaire:\n" + \
                        job["comment"] + \
                        "\n\nImage:\n" + \
                        job["result"]
            self._ui.txtDescription.setText(description)
            self._ui.btnCreateLayer.setEnabled(True)
                
    @pyqtSlot()
    def slot_createLayer(self):
        print "Create Layer"
        if (self._selectedJob is not None):
            job = self._jobs[self._selectedJob]
            result = job["result"]
            fileInfo = QFileInfo(result)
            if (not fileInfo.isAbsolute()):
                fileInfo = QFileInfo(self._config + "\\"+ result)
            if (fileInfo.exists()):
                self.signal_create_layer.emit(self._selectedJob, fileInfo.absoluteFilePath())
        
    @pyqtSlot()    
    def slot_socket_connected(self):
        print "Connected"
        self._connected = True
        self._ui.lblIconConnect.setPixmap(QPixmap(":/images/images/led-green.png"))
        self.slot_listjobs()

    @pyqtSlot()    
    def slot_socket_readyRead(self):
            print "ReadData";
            array = QByteArray()
            while (self._socket.bytesAvailable() > 0) :
                array.append(self._socket.readAll());
            data = array.__str__()
            
            frames = data.split("^");
            
            for frame in frames:
                if (frame!="") : 
                    print "DATAS=" + frame
                    strs = frame.split(':',1)
                    cmd = strs[0].lstrip('$')
                    print cmd
                    
                    values=strs[1].split(";")
                    if (self._messagesDict.has_key(cmd)):
                        func = getattr(self, self._messagesDict[cmd])
                        func(values)
                    else:
                        print "Unknown message: " + frame
                           
            
        
    @pyqtSlot()    
    def slot_socket_disconnected(self):
        print "Disconnected"
        self._connected = False
        self._ui.lblIconConnect.setPixmap(QPixmap(":/images/images/led-grey.png"))
        self.clearJobs()        
        
    @pyqtSlot()    
    def slot_listjobs(self):
        print "ListJobs"
        if self._connected:
            # Effacer la liste des jobs
            self.clearJobs()
            
            # Envoyer la demande de mise a jour 
            sendData = QByteArray()
            sendData.append("$LISTJOBS")
            self._socket.write(sendData)
            self._socket.flush()
            
 
    def processJob(self, values=""):
        print "Receive Job"
        if (len(values)==5):
            jobName=values[0]
            assemblyName=values[1]
            date=values[2]
            comment=values[3]
            result=values[4]
            print "Job Name:"  + jobName
            print "Assembly Name:"  + assemblyName
            print "Date:" + date
            print "Comment:" + comment
            print "Result:" + result
            self.addJob(jobName, assemblyName, date, comment, result)

    def addJob(self, jobName, assemblyName, date, comment, result):
        
        
        if (assemblyName not in self._assemblies):
            assemblyItem =  QTreeWidgetItem([assemblyName])
            self._assemblies[assemblyName]=assemblyItem
            self._ui.treeJobs.addTopLevelItem(assemblyItem)
        else:
            assemblyItem = self._assemblies[assemblyName]
            
        self._jobs[jobName] = {"date": date, "comment" : comment, "result" : result}
        QTreeWidgetItem(assemblyItem, [jobName])
        self._ui.treeJobs.expandAll()
        
        
    def processConfig(self, values=""):
        self._config=values[0]
        print "Config: " + self._config
        
    def processExecution(self, values=""):
        jobName=values[0]
        print "Execution de : " + jobName
        self._ui.txtMessage.append("Execution de " + jobName + "\n")
        self.slot_listjobs();       

    def clearJobs(self):
        self._jobs={}
        self._assemblies={}
        self._selectedJob = None
        self._ui.btnCreateLayer.setEnabled(False)
        self._ui.treeJobs.clear()
        self._ui.txtDescription.clear()
        
    
        